/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}
// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// tag::xsd[]
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schemaDir = "${projectDir}/src/main/resources/xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.xsdCompile.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, removeOldOutput:'yes') {
                schema(dir: schemaDir, includes: "**/*.xsd")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.xsdCompile.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}
// end::xsd[]



task afterEclipseImport {
	dependsOn "genJaxb"
}

// tag::jaxb[]
configurations {
    xsdCompile
}

jar {
    baseName = 'LASoapService'
    version =  '0.1.0'
    from genJaxb.classesDir
}

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web-services")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile("wsdl4j:wsdl4j:1.6.1")
    compile("org.apache.ws.xmlschema:xmlschema-core:2.1.0") 
    //jaxb("org.glassfish.jaxb:jaxb-xjc:2.2.11")
    
    xsdCompile("com.sun.xml.bind:jaxb-xjc:2.2.11")
    xsdCompile("com.sun.xml.bind:jaxb-impl:2.2.11")
    xsdCompile("com.sun.xml.bind:jaxb-core:2.2.11")
    xsdCompile("javax.xml.bind:jaxb-api:2.2.11")
    xsdCompile("javax.xml.stream:stax-api:1.0-2")
    xsdCompile("javax.activation:activation:1.1.1")
    xsdCompile( "ant:ant:1.7.0")
    
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    compile("com.googlecode.json-simple:json-simple:1.1")
    
}

